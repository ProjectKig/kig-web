// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gamelog_cai.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct LogExtension {
    // message fields
    map: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogExtension {
    fn default() -> &'a LogExtension {
        <LogExtension as ::protobuf::Message>::default_instance()
    }
}

impl LogExtension {
    pub fn new() -> LogExtension {
        ::std::default::Default::default()
    }

    // required string map = 1;


    pub fn get_map(&self) -> &str {
        match self.map.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    pub fn has_map(&self) -> bool {
        self.map.is_some()
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ::std::string::String) {
        self.map = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map(&mut self) -> &mut ::std::string::String {
        if self.map.is_none() {
            self.map.set_default();
        }
        self.map.as_mut().unwrap()
    }

    // Take field
    pub fn take_map(&mut self) -> ::std::string::String {
        self.map.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogExtension {
    fn is_initialized(&self) -> bool {
        if self.map.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.map)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.map.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.map.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogExtension {
        LogExtension::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "map",
                |m: &LogExtension| { &m.map },
                |m: &mut LogExtension| { &mut m.map },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogExtension>(
                "LogExtension",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogExtension {
        static instance: ::protobuf::rt::LazyV2<LogExtension> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogExtension::new)
    }
}

impl ::protobuf::Clear for LogExtension {
    fn clear(&mut self) {
        self.map.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogExtension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogExtension {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CatchEvent {
    // message fields
    leader: ::protobuf::SingularField<::std::string::String>,
    carrier: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CatchEvent {
    fn default() -> &'a CatchEvent {
        <CatchEvent as ::protobuf::Message>::default_instance()
    }
}

impl CatchEvent {
    pub fn new() -> CatchEvent {
        ::std::default::Default::default()
    }

    // required string leader = 1;


    pub fn get_leader(&self) -> &str {
        match self.leader.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_leader(&mut self) {
        self.leader.clear();
    }

    pub fn has_leader(&self) -> bool {
        self.leader.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader(&mut self, v: ::std::string::String) {
        self.leader = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader(&mut self) -> &mut ::std::string::String {
        if self.leader.is_none() {
            self.leader.set_default();
        }
        self.leader.as_mut().unwrap()
    }

    // Take field
    pub fn take_leader(&mut self) -> ::std::string::String {
        self.leader.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string carrier = 2;


    pub fn get_carrier(&self) -> &str {
        match self.carrier.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_carrier(&mut self) {
        self.carrier.clear();
    }

    pub fn has_carrier(&self) -> bool {
        self.carrier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_carrier(&mut self, v: ::std::string::String) {
        self.carrier = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_carrier(&mut self) -> &mut ::std::string::String {
        if self.carrier.is_none() {
            self.carrier.set_default();
        }
        self.carrier.as_mut().unwrap()
    }

    // Take field
    pub fn take_carrier(&mut self) -> ::std::string::String {
        self.carrier.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CatchEvent {
    fn is_initialized(&self) -> bool {
        if self.leader.is_none() {
            return false;
        }
        if self.carrier.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.leader)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.carrier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.leader.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.carrier.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.leader.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.carrier.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CatchEvent {
        CatchEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leader",
                |m: &CatchEvent| { &m.leader },
                |m: &mut CatchEvent| { &mut m.leader },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "carrier",
                |m: &CatchEvent| { &m.carrier },
                |m: &mut CatchEvent| { &mut m.carrier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CatchEvent>(
                "CatchEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CatchEvent {
        static instance: ::protobuf::rt::LazyV2<CatchEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CatchEvent::new)
    }
}

impl ::protobuf::Clear for CatchEvent {
    fn clear(&mut self) {
        self.leader.clear();
        self.carrier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CatchEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CatchEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EscapeEvent {
    // message fields
    leader: ::protobuf::SingularField<::std::string::String>,
    // message oneof groups
    pub field_type: ::std::option::Option<EscapeEvent_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EscapeEvent {
    fn default() -> &'a EscapeEvent {
        <EscapeEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EscapeEvent_oneof_type {
    saver(::std::string::String),
    chance(f32),
}

impl EscapeEvent {
    pub fn new() -> EscapeEvent {
        ::std::default::Default::default()
    }

    // required string leader = 1;


    pub fn get_leader(&self) -> &str {
        match self.leader.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_leader(&mut self) {
        self.leader.clear();
    }

    pub fn has_leader(&self) -> bool {
        self.leader.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader(&mut self, v: ::std::string::String) {
        self.leader = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader(&mut self) -> &mut ::std::string::String {
        if self.leader.is_none() {
            self.leader.set_default();
        }
        self.leader.as_mut().unwrap()
    }

    // Take field
    pub fn take_leader(&mut self) -> ::std::string::String {
        self.leader.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string saver = 2;


    pub fn get_saver(&self) -> &str {
        match self.field_type {
            ::std::option::Option::Some(EscapeEvent_oneof_type::saver(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_saver(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_saver(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(EscapeEvent_oneof_type::saver(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_saver(&mut self, v: ::std::string::String) {
        self.field_type = ::std::option::Option::Some(EscapeEvent_oneof_type::saver(v))
    }

    // Mutable pointer to the field.
    pub fn mut_saver(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(EscapeEvent_oneof_type::saver(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(EscapeEvent_oneof_type::saver(::std::string::String::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(EscapeEvent_oneof_type::saver(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_saver(&mut self) -> ::std::string::String {
        if self.has_saver() {
            match self.field_type.take() {
                ::std::option::Option::Some(EscapeEvent_oneof_type::saver(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // optional float chance = 3;


    pub fn get_chance(&self) -> f32 {
        match self.field_type {
            ::std::option::Option::Some(EscapeEvent_oneof_type::chance(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_chance(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_chance(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(EscapeEvent_oneof_type::chance(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chance(&mut self, v: f32) {
        self.field_type = ::std::option::Option::Some(EscapeEvent_oneof_type::chance(v))
    }
}

impl ::protobuf::Message for EscapeEvent {
    fn is_initialized(&self) -> bool {
        if self.leader.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.leader)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(EscapeEvent_oneof_type::saver(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(EscapeEvent_oneof_type::chance(is.read_float()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.leader.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &EscapeEvent_oneof_type::saver(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &EscapeEvent_oneof_type::chance(v) => {
                    my_size += 5;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.leader.as_ref() {
            os.write_string(1, &v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &EscapeEvent_oneof_type::saver(ref v) => {
                    os.write_string(2, v)?;
                },
                &EscapeEvent_oneof_type::chance(v) => {
                    os.write_float(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EscapeEvent {
        EscapeEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leader",
                |m: &EscapeEvent| { &m.leader },
                |m: &mut EscapeEvent| { &mut m.leader },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "saver",
                EscapeEvent::has_saver,
                EscapeEvent::get_saver,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor::<_>(
                "chance",
                EscapeEvent::has_chance,
                EscapeEvent::get_chance,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EscapeEvent>(
                "EscapeEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EscapeEvent {
        static instance: ::protobuf::rt::LazyV2<EscapeEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EscapeEvent::new)
    }
}

impl ::protobuf::Clear for EscapeEvent {
    fn clear(&mut self) {
        self.leader.clear();
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EscapeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EscapeEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CaptureEvent {
    // message fields
    leader: ::protobuf::SingularField<::std::string::String>,
    carrier: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CaptureEvent {
    fn default() -> &'a CaptureEvent {
        <CaptureEvent as ::protobuf::Message>::default_instance()
    }
}

impl CaptureEvent {
    pub fn new() -> CaptureEvent {
        ::std::default::Default::default()
    }

    // required string leader = 1;


    pub fn get_leader(&self) -> &str {
        match self.leader.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_leader(&mut self) {
        self.leader.clear();
    }

    pub fn has_leader(&self) -> bool {
        self.leader.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader(&mut self, v: ::std::string::String) {
        self.leader = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader(&mut self) -> &mut ::std::string::String {
        if self.leader.is_none() {
            self.leader.set_default();
        }
        self.leader.as_mut().unwrap()
    }

    // Take field
    pub fn take_leader(&mut self) -> ::std::string::String {
        self.leader.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string carrier = 2;


    pub fn get_carrier(&self) -> &str {
        match self.carrier.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_carrier(&mut self) {
        self.carrier.clear();
    }

    pub fn has_carrier(&self) -> bool {
        self.carrier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_carrier(&mut self, v: ::std::string::String) {
        self.carrier = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_carrier(&mut self) -> &mut ::std::string::String {
        if self.carrier.is_none() {
            self.carrier.set_default();
        }
        self.carrier.as_mut().unwrap()
    }

    // Take field
    pub fn take_carrier(&mut self) -> ::std::string::String {
        self.carrier.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CaptureEvent {
    fn is_initialized(&self) -> bool {
        if self.leader.is_none() {
            return false;
        }
        if self.carrier.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.leader)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.carrier)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.leader.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.carrier.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.leader.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.carrier.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CaptureEvent {
        CaptureEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "leader",
                |m: &CaptureEvent| { &m.leader },
                |m: &mut CaptureEvent| { &mut m.leader },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "carrier",
                |m: &CaptureEvent| { &m.carrier },
                |m: &mut CaptureEvent| { &mut m.carrier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CaptureEvent>(
                "CaptureEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CaptureEvent {
        static instance: ::protobuf::rt::LazyV2<CaptureEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CaptureEvent::new)
    }
}

impl ::protobuf::Clear for CaptureEvent {
    fn clear(&mut self) {
        self.leader.clear();
        self.carrier.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CaptureEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeathEvent {
    // message fields
    player: ::protobuf::SingularField<::std::string::String>,
    cause: ::std::option::Option<DeathEvent_DeathCause>,
    killer: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeathEvent {
    fn default() -> &'a DeathEvent {
        <DeathEvent as ::protobuf::Message>::default_instance()
    }
}

impl DeathEvent {
    pub fn new() -> DeathEvent {
        ::std::default::Default::default()
    }

    // required string player = 1;


    pub fn get_player(&self) -> &str {
        match self.player.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_player(&mut self) {
        self.player.clear();
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: ::std::string::String) {
        self.player = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player(&mut self) -> &mut ::std::string::String {
        if self.player.is_none() {
            self.player.set_default();
        }
        self.player.as_mut().unwrap()
    }

    // Take field
    pub fn take_player(&mut self) -> ::std::string::String {
        self.player.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .kigcai.DeathEvent.DeathCause cause = 2;


    pub fn get_cause(&self) -> DeathEvent_DeathCause {
        self.cause.unwrap_or(DeathEvent_DeathCause::ENTITY_ATTACK)
    }
    pub fn clear_cause(&mut self) {
        self.cause = ::std::option::Option::None;
    }

    pub fn has_cause(&self) -> bool {
        self.cause.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cause(&mut self, v: DeathEvent_DeathCause) {
        self.cause = ::std::option::Option::Some(v);
    }

    // optional string killer = 3;


    pub fn get_killer(&self) -> &str {
        match self.killer.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_killer(&mut self) {
        self.killer.clear();
    }

    pub fn has_killer(&self) -> bool {
        self.killer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_killer(&mut self, v: ::std::string::String) {
        self.killer = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_killer(&mut self) -> &mut ::std::string::String {
        if self.killer.is_none() {
            self.killer.set_default();
        }
        self.killer.as_mut().unwrap()
    }

    // Take field
    pub fn take_killer(&mut self) -> ::std::string::String {
        self.killer.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeathEvent {
    fn is_initialized(&self) -> bool {
        if self.player.is_none() {
            return false;
        }
        if self.cause.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.player)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.cause, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.killer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.cause {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.killer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.cause {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.killer.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeathEvent {
        DeathEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "player",
                |m: &DeathEvent| { &m.player },
                |m: &mut DeathEvent| { &mut m.player },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DeathEvent_DeathCause>>(
                "cause",
                |m: &DeathEvent| { &m.cause },
                |m: &mut DeathEvent| { &mut m.cause },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "killer",
                |m: &DeathEvent| { &m.killer },
                |m: &mut DeathEvent| { &mut m.killer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeathEvent>(
                "DeathEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeathEvent {
        static instance: ::protobuf::rt::LazyV2<DeathEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeathEvent::new)
    }
}

impl ::protobuf::Clear for DeathEvent {
    fn clear(&mut self) {
        self.player.clear();
        self.cause = ::std::option::Option::None;
        self.killer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeathEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeathEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DeathEvent_DeathCause {
    ENTITY_ATTACK = 1,
    PROJECTILE = 2,
    VOID = 3,
    SUFFOCATION = 4,
    FIRE = 5,
    FIRE_TICK = 6,
    OTHER = 7,
}

impl ::protobuf::ProtobufEnum for DeathEvent_DeathCause {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeathEvent_DeathCause> {
        match value {
            1 => ::std::option::Option::Some(DeathEvent_DeathCause::ENTITY_ATTACK),
            2 => ::std::option::Option::Some(DeathEvent_DeathCause::PROJECTILE),
            3 => ::std::option::Option::Some(DeathEvent_DeathCause::VOID),
            4 => ::std::option::Option::Some(DeathEvent_DeathCause::SUFFOCATION),
            5 => ::std::option::Option::Some(DeathEvent_DeathCause::FIRE),
            6 => ::std::option::Option::Some(DeathEvent_DeathCause::FIRE_TICK),
            7 => ::std::option::Option::Some(DeathEvent_DeathCause::OTHER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DeathEvent_DeathCause] = &[
            DeathEvent_DeathCause::ENTITY_ATTACK,
            DeathEvent_DeathCause::PROJECTILE,
            DeathEvent_DeathCause::VOID,
            DeathEvent_DeathCause::SUFFOCATION,
            DeathEvent_DeathCause::FIRE,
            DeathEvent_DeathCause::FIRE_TICK,
            DeathEvent_DeathCause::OTHER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DeathEvent_DeathCause>("DeathEvent.DeathCause", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DeathEvent_DeathCause {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for DeathEvent_DeathCause {
    fn default() -> Self {
        DeathEvent_DeathCause::ENTITY_ATTACK
    }
}

impl ::protobuf::reflect::ProtobufValue for DeathEvent_DeathCause {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11gamelog_cai.proto\x12\x06kigcai\x1a\x12gamelog_core.proto\"$\n\x0c\
    LogExtension\x12\x12\n\x03map\x18\x01\x20\x02(\tR\x03mapB\0:\0\"D\n\nCat\
    chEvent\x12\x18\n\x06leader\x18\x01\x20\x02(\tR\x06leaderB\0\x12\x1a\n\
    \x07carrier\x18\x02\x20\x02(\tR\x07carrierB\0:\0\"g\n\x0bEscapeEvent\x12\
    \x18\n\x06leader\x18\x01\x20\x02(\tR\x06leaderB\0\x12\x18\n\x05saver\x18\
    \x02\x20\x01(\tH\0R\x05saverB\0\x12\x1a\n\x06chance\x18\x03\x20\x01(\x02\
    H\0R\x06chanceB\0B\x06\n\x04type:\0\"F\n\x0cCaptureEvent\x12\x18\n\x06le\
    ader\x18\x01\x20\x02(\tR\x06leaderB\0\x12\x1a\n\x07carrier\x18\x02\x20\
    \x02(\tR\x07carrierB\0:\0\"\xeb\x01\n\nDeathEvent\x12\x18\n\x06player\
    \x18\x01\x20\x02(\tR\x06playerB\0\x125\n\x05cause\x18\x02\x20\x02(\x0e2\
    \x1d.kigcai.DeathEvent.DeathCauseR\x05causeB\0\x12\x18\n\x06killer\x18\
    \x03\x20\x01(\tR\x06killerB\0\"p\n\nDeathCause\x12\x11\n\rENTITY_ATTACK\
    \x10\x01\x12\x0e\n\nPROJECTILE\x10\x02\x12\x08\n\x04VOID\x10\x03\x12\x0f\
    \n\x0bSUFFOCATION\x10\x04\x12\x08\n\x04FIRE\x10\x05\x12\r\n\tFIRE_TICK\
    \x10\x06\x12\t\n\x05OTHER\x10\x07\x1a\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
