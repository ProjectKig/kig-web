// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gamelog_core.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Player {
    // message fields
    uuid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    // required bytes uuid = 1;


    pub fn get_uuid(&self) -> &[u8] {
        match self.uuid.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    pub fn has_uuid(&self) -> bool {
        self.uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.uuid.is_none() {
            self.uuid.set_default();
        }
        self.uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        self.uuid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required string name = 2;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Player {
    fn is_initialized(&self) -> bool {
        if self.uuid.is_none() {
            return false;
        }
        if self.name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.uuid.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.uuid.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Player {
        Player::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "uuid",
                |m: &Player| { &m.uuid },
                |m: &mut Player| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Player| { &m.name },
                |m: &mut Player| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Player>(
                "Player",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Player {
        static instance: ::protobuf::rt::LazyV2<Player> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Player::new)
    }
}

impl ::protobuf::Clear for Player {
    fn clear(&mut self) {
        self.uuid.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Team {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    score: ::std::option::Option<i32>,
    pub players: ::protobuf::RepeatedField<Player>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Team {
    fn default() -> &'a Team {
        <Team as ::protobuf::Message>::default_instance()
    }
}

impl Team {
    pub fn new() -> Team {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int32 score = 2;


    pub fn get_score(&self) -> i32 {
        self.score.unwrap_or(0)
    }
    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: i32) {
        self.score = ::std::option::Option::Some(v);
    }

    // repeated .kigcore.Player players = 3;


    pub fn get_players(&self) -> &[Player] {
        &self.players
    }
    pub fn clear_players(&mut self) {
        self.players.clear();
    }

    // Param is passed by value, moved
    pub fn set_players(&mut self, v: ::protobuf::RepeatedField<Player>) {
        self.players = v;
    }

    // Mutable pointer to the field.
    pub fn mut_players(&mut self) -> &mut ::protobuf::RepeatedField<Player> {
        &mut self.players
    }

    // Take field
    pub fn take_players(&mut self) -> ::protobuf::RepeatedField<Player> {
        ::std::mem::replace(&mut self.players, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Team {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.score.is_none() {
            return false;
        }
        for v in &self.players {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.score = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.players)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.score {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.score {
            os.write_int32(2, v)?;
        }
        for v in &self.players {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Team {
        Team::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Team| { &m.name },
                |m: &mut Team| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "score",
                |m: &Team| { &m.score },
                |m: &mut Team| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Player>>(
                "players",
                |m: &Team| { &m.players },
                |m: &mut Team| { &mut m.players },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Team>(
                "Team",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Team {
        static instance: ::protobuf::rt::LazyV2<Team> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Team::new)
    }
}

impl ::protobuf::Clear for Team {
    fn clear(&mut self) {
        self.name.clear();
        self.score = ::std::option::Option::None;
        self.players.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Team {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Team {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeEvent {
    // message fields
    pub event: ::protobuf::SingularPtrField<GameEvent>,
    time: ::std::option::Option<i32>,
    state: ::std::option::Option<TimeEvent_ModeState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeEvent {
    fn default() -> &'a TimeEvent {
        <TimeEvent as ::protobuf::Message>::default_instance()
    }
}

impl TimeEvent {
    pub fn new() -> TimeEvent {
        ::std::default::Default::default()
    }

    // required .kigcore.GameEvent event = 1;


    pub fn get_event(&self) -> &GameEvent {
        self.event.as_ref().unwrap_or_else(|| <GameEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: GameEvent) {
        self.event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut GameEvent {
        if self.event.is_none() {
            self.event.set_default();
        }
        self.event.as_mut().unwrap()
    }

    // Take field
    pub fn take_event(&mut self) -> GameEvent {
        self.event.take().unwrap_or_else(|| GameEvent::new())
    }

    // required int32 time = 2;


    pub fn get_time(&self) -> i32 {
        self.time.unwrap_or(0)
    }
    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i32) {
        self.time = ::std::option::Option::Some(v);
    }

    // required .kigcore.TimeEvent.ModeState state = 3;


    pub fn get_state(&self) -> TimeEvent_ModeState {
        self.state.unwrap_or(TimeEvent_ModeState::LOBBY)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: TimeEvent_ModeState) {
        self.state = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TimeEvent {
    fn is_initialized(&self) -> bool {
        if self.event.is_none() {
            return false;
        }
        if self.time.is_none() {
            return false;
        }
        if self.state.is_none() {
            return false;
        }
        for v in &self.event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.event.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.time {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeEvent {
        TimeEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GameEvent>>(
                "event",
                |m: &TimeEvent| { &m.event },
                |m: &mut TimeEvent| { &mut m.event },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "time",
                |m: &TimeEvent| { &m.time },
                |m: &mut TimeEvent| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TimeEvent_ModeState>>(
                "state",
                |m: &TimeEvent| { &m.state },
                |m: &mut TimeEvent| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeEvent>(
                "TimeEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeEvent {
        static instance: ::protobuf::rt::LazyV2<TimeEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeEvent::new)
    }
}

impl ::protobuf::Clear for TimeEvent {
    fn clear(&mut self) {
        self.event.clear();
        self.time = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TimeEvent_ModeState {
    LOBBY = 1,
    WARMUP = 2,
    GAME = 3,
    ENDGAME = 4,
}

impl ::protobuf::ProtobufEnum for TimeEvent_ModeState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TimeEvent_ModeState> {
        match value {
            1 => ::std::option::Option::Some(TimeEvent_ModeState::LOBBY),
            2 => ::std::option::Option::Some(TimeEvent_ModeState::WARMUP),
            3 => ::std::option::Option::Some(TimeEvent_ModeState::GAME),
            4 => ::std::option::Option::Some(TimeEvent_ModeState::ENDGAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TimeEvent_ModeState] = &[
            TimeEvent_ModeState::LOBBY,
            TimeEvent_ModeState::WARMUP,
            TimeEvent_ModeState::GAME,
            TimeEvent_ModeState::ENDGAME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TimeEvent_ModeState>("TimeEvent.ModeState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TimeEvent_ModeState {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for TimeEvent_ModeState {
    fn default() -> Self {
        TimeEvent_ModeState::LOBBY
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeEvent_ModeState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameEvent {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameEvent {
    fn default() -> &'a GameEvent {
        <GameEvent as ::protobuf::Message>::default_instance()
    }
}

impl GameEvent {
    pub fn new() -> GameEvent {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GameEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameEvent {
        GameEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameEvent>(
                "GameEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameEvent {
        static instance: ::protobuf::rt::LazyV2<GameEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameEvent::new)
    }
}

impl ::protobuf::Clear for GameEvent {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChatEvent {
    // message fields
    sender: ::protobuf::SingularField<::std::string::String>,
    message: ::protobuf::SingularField<::std::string::String>,
    field_type: ::std::option::Option<ChatEvent_ChatType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChatEvent {
    fn default() -> &'a ChatEvent {
        <ChatEvent as ::protobuf::Message>::default_instance()
    }
}

impl ChatEvent {
    pub fn new() -> ChatEvent {
        ::std::default::Default::default()
    }

    // required string sender = 1;


    pub fn get_sender(&self) -> &str {
        match self.sender.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        self.sender.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string message = 2;


    pub fn get_message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .kigcore.ChatEvent.ChatType type = 3;


    pub fn get_field_type(&self) -> ChatEvent_ChatType {
        self.field_type.unwrap_or(ChatEvent_ChatType::LOBBY)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ChatEvent_ChatType) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ChatEvent {
    fn is_initialized(&self) -> bool {
        if self.sender.is_none() {
            return false;
        }
        if self.message.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sender.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sender.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChatEvent {
        ChatEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &ChatEvent| { &m.sender },
                |m: &mut ChatEvent| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &ChatEvent| { &m.message },
                |m: &mut ChatEvent| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ChatEvent_ChatType>>(
                "type",
                |m: &ChatEvent| { &m.field_type },
                |m: &mut ChatEvent| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChatEvent>(
                "ChatEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChatEvent {
        static instance: ::protobuf::rt::LazyV2<ChatEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChatEvent::new)
    }
}

impl ::protobuf::Clear for ChatEvent {
    fn clear(&mut self) {
        self.sender.clear();
        self.message.clear();
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChatEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChatEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChatEvent_ChatType {
    LOBBY = 1,
    TEAM = 2,
    SHOUT = 3,
    BROADCAST = 4,
}

impl ::protobuf::ProtobufEnum for ChatEvent_ChatType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChatEvent_ChatType> {
        match value {
            1 => ::std::option::Option::Some(ChatEvent_ChatType::LOBBY),
            2 => ::std::option::Option::Some(ChatEvent_ChatType::TEAM),
            3 => ::std::option::Option::Some(ChatEvent_ChatType::SHOUT),
            4 => ::std::option::Option::Some(ChatEvent_ChatType::BROADCAST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChatEvent_ChatType] = &[
            ChatEvent_ChatType::LOBBY,
            ChatEvent_ChatType::TEAM,
            ChatEvent_ChatType::SHOUT,
            ChatEvent_ChatType::BROADCAST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ChatEvent_ChatType>("ChatEvent.ChatType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ChatEvent_ChatType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ChatEvent_ChatType {
    fn default() -> Self {
        ChatEvent_ChatType::LOBBY
    }
}

impl ::protobuf::reflect::ProtobufValue for ChatEvent_ChatType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinEvent {
    // message fields
    player: ::protobuf::SingularField<::std::string::String>,
    team: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinEvent {
    fn default() -> &'a JoinEvent {
        <JoinEvent as ::protobuf::Message>::default_instance()
    }
}

impl JoinEvent {
    pub fn new() -> JoinEvent {
        ::std::default::Default::default()
    }

    // required string player = 1;


    pub fn get_player(&self) -> &str {
        match self.player.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_player(&mut self) {
        self.player.clear();
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: ::std::string::String) {
        self.player = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player(&mut self) -> &mut ::std::string::String {
        if self.player.is_none() {
            self.player.set_default();
        }
        self.player.as_mut().unwrap()
    }

    // Take field
    pub fn take_player(&mut self) -> ::std::string::String {
        self.player.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int32 team = 2;


    pub fn get_team(&self) -> i32 {
        self.team.unwrap_or(0)
    }
    pub fn clear_team(&mut self) {
        self.team = ::std::option::Option::None;
    }

    pub fn has_team(&self) -> bool {
        self.team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team(&mut self, v: i32) {
        self.team = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for JoinEvent {
    fn is_initialized(&self) -> bool {
        if self.player.is_none() {
            return false;
        }
        if self.team.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.player)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.team = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.team {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.team {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinEvent {
        JoinEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "player",
                |m: &JoinEvent| { &m.player },
                |m: &mut JoinEvent| { &mut m.player },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "team",
                |m: &JoinEvent| { &m.team },
                |m: &mut JoinEvent| { &mut m.team },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<JoinEvent>(
                "JoinEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static JoinEvent {
        static instance: ::protobuf::rt::LazyV2<JoinEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(JoinEvent::new)
    }
}

impl ::protobuf::Clear for JoinEvent {
    fn clear(&mut self) {
        self.player.clear();
        self.team = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaveEvent {
    // message fields
    player: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LeaveEvent {
    fn default() -> &'a LeaveEvent {
        <LeaveEvent as ::protobuf::Message>::default_instance()
    }
}

impl LeaveEvent {
    pub fn new() -> LeaveEvent {
        ::std::default::Default::default()
    }

    // required string player = 1;


    pub fn get_player(&self) -> &str {
        match self.player.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_player(&mut self) {
        self.player.clear();
    }

    pub fn has_player(&self) -> bool {
        self.player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player(&mut self, v: ::std::string::String) {
        self.player = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player(&mut self) -> &mut ::std::string::String {
        if self.player.is_none() {
            self.player.set_default();
        }
        self.player.as_mut().unwrap()
    }

    // Take field
    pub fn take_player(&mut self) -> ::std::string::String {
        self.player.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for LeaveEvent {
    fn is_initialized(&self) -> bool {
        if self.player.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.player)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.player.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.player.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaveEvent {
        LeaveEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "player",
                |m: &LeaveEvent| { &m.player },
                |m: &mut LeaveEvent| { &mut m.player },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LeaveEvent>(
                "LeaveEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LeaveEvent {
        static instance: ::protobuf::rt::LazyV2<LeaveEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LeaveEvent::new)
    }
}

impl ::protobuf::Clear for LeaveEvent {
    fn clear(&mut self) {
        self.player.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaveEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaveEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GameLog {
    // message fields
    pub teams: ::protobuf::RepeatedField<Team>,
    winner: ::protobuf::SingularField<::std::string::String>,
    game_start: ::std::option::Option<i64>,
    game_end: ::std::option::Option<i64>,
    start_players: ::std::option::Option<i32>,
    pub events: ::protobuf::RepeatedField<TimeEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GameLog {
    fn default() -> &'a GameLog {
        <GameLog as ::protobuf::Message>::default_instance()
    }
}

impl GameLog {
    pub fn new() -> GameLog {
        ::std::default::Default::default()
    }

    // repeated .kigcore.Team teams = 1;


    pub fn get_teams(&self) -> &[Team] {
        &self.teams
    }
    pub fn clear_teams(&mut self) {
        self.teams.clear();
    }

    // Param is passed by value, moved
    pub fn set_teams(&mut self, v: ::protobuf::RepeatedField<Team>) {
        self.teams = v;
    }

    // Mutable pointer to the field.
    pub fn mut_teams(&mut self) -> &mut ::protobuf::RepeatedField<Team> {
        &mut self.teams
    }

    // Take field
    pub fn take_teams(&mut self) -> ::protobuf::RepeatedField<Team> {
        ::std::mem::replace(&mut self.teams, ::protobuf::RepeatedField::new())
    }

    // optional string winner = 2;


    pub fn get_winner(&self) -> &str {
        match self.winner.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_winner(&mut self) {
        self.winner.clear();
    }

    pub fn has_winner(&self) -> bool {
        self.winner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_winner(&mut self, v: ::std::string::String) {
        self.winner = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_winner(&mut self) -> &mut ::std::string::String {
        if self.winner.is_none() {
            self.winner.set_default();
        }
        self.winner.as_mut().unwrap()
    }

    // Take field
    pub fn take_winner(&mut self) -> ::std::string::String {
        self.winner.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required int64 game_start = 3;


    pub fn get_game_start(&self) -> i64 {
        self.game_start.unwrap_or(0)
    }
    pub fn clear_game_start(&mut self) {
        self.game_start = ::std::option::Option::None;
    }

    pub fn has_game_start(&self) -> bool {
        self.game_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_start(&mut self, v: i64) {
        self.game_start = ::std::option::Option::Some(v);
    }

    // required int64 game_end = 4;


    pub fn get_game_end(&self) -> i64 {
        self.game_end.unwrap_or(0)
    }
    pub fn clear_game_end(&mut self) {
        self.game_end = ::std::option::Option::None;
    }

    pub fn has_game_end(&self) -> bool {
        self.game_end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_end(&mut self, v: i64) {
        self.game_end = ::std::option::Option::Some(v);
    }

    // required int32 start_players = 5;


    pub fn get_start_players(&self) -> i32 {
        self.start_players.unwrap_or(0)
    }
    pub fn clear_start_players(&mut self) {
        self.start_players = ::std::option::Option::None;
    }

    pub fn has_start_players(&self) -> bool {
        self.start_players.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_players(&mut self, v: i32) {
        self.start_players = ::std::option::Option::Some(v);
    }

    // repeated .kigcore.TimeEvent events = 6;


    pub fn get_events(&self) -> &[TimeEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<TimeEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<TimeEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<TimeEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GameLog {
    fn is_initialized(&self) -> bool {
        if self.game_start.is_none() {
            return false;
        }
        if self.game_end.is_none() {
            return false;
        }
        if self.start_players.is_none() {
            return false;
        }
        for v in &self.teams {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.teams)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.winner)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.game_start = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.game_end = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.start_players = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.winner.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.game_start {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.game_end {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.start_players {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.teams {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.winner.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.game_start {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.game_end {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.start_players {
            os.write_int32(5, v)?;
        }
        for v in &self.events {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GameLog {
        GameLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Team>>(
                "teams",
                |m: &GameLog| { &m.teams },
                |m: &mut GameLog| { &mut m.teams },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "winner",
                |m: &GameLog| { &m.winner },
                |m: &mut GameLog| { &mut m.winner },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "game_start",
                |m: &GameLog| { &m.game_start },
                |m: &mut GameLog| { &mut m.game_start },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "game_end",
                |m: &GameLog| { &m.game_end },
                |m: &mut GameLog| { &mut m.game_end },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "start_players",
                |m: &GameLog| { &m.start_players },
                |m: &mut GameLog| { &mut m.start_players },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimeEvent>>(
                "events",
                |m: &GameLog| { &m.events },
                |m: &mut GameLog| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GameLog>(
                "GameLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GameLog {
        static instance: ::protobuf::rt::LazyV2<GameLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GameLog::new)
    }
}

impl ::protobuf::Clear for GameLog {
    fn clear(&mut self) {
        self.teams.clear();
        self.winner.clear();
        self.game_start = ::std::option::Option::None;
        self.game_end = ::std::option::Option::None;
        self.start_players = ::std::option::Option::None;
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GameLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12gamelog_core.proto\x12\x07kigcore\"6\n\x06Player\x12\x14\n\x04uuid\
    \x18\x01\x20\x02(\x0cR\x04uuidB\0\x12\x14\n\x04name\x18\x02\x20\x02(\tR\
    \x04nameB\0:\0\"c\n\x04Team\x12\x14\n\x04name\x18\x01\x20\x02(\tR\x04nam\
    eB\0\x12\x16\n\x05score\x18\x02\x20\x02(\x05R\x05scoreB\0\x12+\n\x07play\
    ers\x18\x03\x20\x03(\x0b2\x0f.kigcore.PlayerR\x07playersB\0:\0\"\xc2\x01\
    \n\tTimeEvent\x12*\n\x05event\x18\x01\x20\x02(\x0b2\x12.kigcore.GameEven\
    tR\x05eventB\0\x12\x14\n\x04time\x18\x02\x20\x02(\x05R\x04timeB\0\x124\n\
    \x05state\x18\x03\x20\x02(\x0e2\x1c.kigcore.TimeEvent.ModeStateR\x05stat\
    eB\0\";\n\tModeState\x12\t\n\x05LOBBY\x10\x01\x12\n\n\x06WARMUP\x10\x02\
    \x12\x08\n\x04GAME\x10\x03\x12\x0b\n\x07ENDGAME\x10\x04\x1a\0:\0\"\r\n\t\
    GameEvent:\0\"\xb3\x01\n\tChatEvent\x12\x18\n\x06sender\x18\x01\x20\x02(\
    \tR\x06senderB\0\x12\x1a\n\x07message\x18\x02\x20\x02(\tR\x07messageB\0\
    \x121\n\x04type\x18\x03\x20\x02(\x0e2\x1b.kigcore.ChatEvent.ChatTypeR\
    \x04typeB\0\";\n\x08ChatType\x12\t\n\x05LOBBY\x10\x01\x12\x08\n\x04TEAM\
    \x10\x02\x12\t\n\x05SHOUT\x10\x03\x12\r\n\tBROADCAST\x10\x04\x1a\0:\0\"=\
    \n\tJoinEvent\x12\x18\n\x06player\x18\x01\x20\x02(\tR\x06playerB\0\x12\
    \x14\n\x04team\x18\x02\x20\x02(\x05R\x04teamB\0:\0\"(\n\nLeaveEvent\x12\
    \x18\n\x06player\x18\x01\x20\x02(\tR\x06playerB\0:\0\"\xdf\x01\n\x07Game\
    Log\x12%\n\x05teams\x18\x01\x20\x03(\x0b2\r.kigcore.TeamR\x05teamsB\0\
    \x12\x18\n\x06winner\x18\x02\x20\x01(\tR\x06winnerB\0\x12\x1f\n\ngame_st\
    art\x18\x03\x20\x02(\x03R\tgameStartB\0\x12\x1b\n\x08game_end\x18\x04\
    \x20\x02(\x03R\x07gameEndB\0\x12%\n\rstart_players\x18\x05\x20\x02(\x05R\
    \x0cstartPlayersB\0\x12,\n\x06events\x18\x06\x20\x03(\x0b2\x12.kigcore.T\
    imeEventR\x06eventsB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
